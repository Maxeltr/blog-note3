<?php

//namespace MxmUser\Controller;

namespace MxmUserTest\Controller;

use MxmUser\Controller\ListController;
use Zend\Stdlib\ArrayUtils;
use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;
use  Zend\ServiceManager\ServiceManager;
use MxmUser\Service\UserServiceInterface;
use MxmUser\Service\UserService;
use MxmUser\Model\User;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-04 at 13:39:53.
 */
class ListControllerTest extends AbstractHttpControllerTestCase //\PHPUnit_Framework_TestCase
{

    /**
     * @var ListController
     */
    //protected $object;

    protected $userService;

    protected $traceError = true;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        // The module configuration should still be applicable for tests.
        // You can override configuration here with test case specific values,
        // such as sample view templates, path stacks, module_listener_options,
        // etc.
        $configOverrides = [];

        $this->setApplicationConfig(ArrayUtils::merge(
            // Grabbing the full application configuration:
            include __DIR__ . '/../../../../../../config/application.config.php',
            $configOverrides
        ));
        parent::setUp();

        $this->configureServiceManager($this->getApplicationServiceLocator());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers MxmUser\Controller\ListController::listUsersAction
     *
     */
    public function testListUsersAction()
    {
//        $array = array();
//        $paginator = new \Zend\Paginator\Paginator(
//                new \Zend\Paginator\Adapter\ArrayAdapter($array)
//            );
//
//        $userServiceMock = $this->getMockBuilder('MxmUser\Service\UserServiceInterface')
//            ->disableOriginalConstructor()->getMock();
//
//        $userServiceMock->expects($this->once())->method('findAllUsers')
//            ->will($this->returnValue($paginator));
//
//        $serviceManager = $this->getApplicationServiceLocator();
//        $serviceManager->setAllowOverride(true);
//        $serviceManager->setService('MxmUser\Service\UserServiceInterface', $userServiceMock);

        $this->dispatch('/list/users');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('MxmUser');
        $this->assertControllerName(ListController::class);
        $this->assertControllerClass('ListController');
        $this->assertMatchedRouteName('listUsers');
    }

    public function testDetailUserAction()
    {
//        $user = new User();
//
//        $userServiceMock = $this->getMockBuilder('MxmUser\Service\UserServiceInterface')
//            ->disableOriginalConstructor()->getMock();
//
//        $userServiceMock->expects($this->once())->method('findUserById')
//            ->will($this->returnValue($user));
//
//        $serviceManager = $this->getApplicationServiceLocator();
//        $serviceManager->setAllowOverride(true);
//        $serviceManager->setService('MxmUser\Service\UserServiceInterface', $userServiceMock);

        $this->dispatch('/detail/user/1');
        //$this->assertResponseStatusCode(200);
        $this->assertModuleName('MxmUser');
        $this->assertControllerName(ListController::class);
        $this->assertControllerClass('ListController');
        $this->assertMatchedRouteName('detailUser');
    }

    protected function configureServiceManager(ServiceManager $services)
    {
        $services->setAllowOverride(true);

        $services->setService('config', $this->updateConfig($services->get('config')));
        $services->setService(UserServiceInterface::class, $this->mockUserService()->reveal());

        $services->setAllowOverride(false);
    }

    protected function updateConfig($config)
    {
        //$config['db'] = [];
        return $config;
    }

    protected function mockUserService()
    {
        $this->userService = $this->prophesize(UserServiceInterface::class);

        $array = array();
        $paginator = new \Zend\Paginator\Paginator(
                new \Zend\Paginator\Adapter\ArrayAdapter($array)
            );
	$this->userService->findAllUsers()->willReturn($paginator);

        $user = new User();
        $this->userService->findUserById("1")->willReturn($user);

        return $this->userService;
    }

}
